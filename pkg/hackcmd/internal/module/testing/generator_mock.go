// Code generated by MockGen. DO NOT EDIT.
// Source: generator.go

// Package moduletesting is a generated GoMock package.
package moduletesting

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGenerator is a mock of Generator interface
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// GenerateProject mocks base method
func (m *MockGenerator) GenerateProject(rootDir, pkgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProject", rootDir, pkgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateProject indicates an expected call of GenerateProject
func (mr *MockGeneratorMockRecorder) GenerateProject(rootDir, pkgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProject", reflect.TypeOf((*MockGenerator)(nil).GenerateProject), rootDir, pkgName)
}

// MockProjectGenerator is a mock of ProjectGenerator interface
type MockProjectGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockProjectGeneratorMockRecorder
}

// MockProjectGeneratorMockRecorder is the mock recorder for MockProjectGenerator
type MockProjectGeneratorMockRecorder struct {
	mock *MockProjectGenerator
}

// NewMockProjectGenerator creates a new mock instance
func NewMockProjectGenerator(ctrl *gomock.Controller) *MockProjectGenerator {
	mock := &MockProjectGenerator{ctrl: ctrl}
	mock.recorder = &MockProjectGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectGenerator) EXPECT() *MockProjectGeneratorMockRecorder {
	return m.recorder
}

// GenerateProject mocks base method
func (m *MockProjectGenerator) GenerateProject(rootDir, pkgName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProject", rootDir, pkgName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateProject indicates an expected call of GenerateProject
func (mr *MockProjectGeneratorMockRecorder) GenerateProject(rootDir, pkgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProject", reflect.TypeOf((*MockProjectGenerator)(nil).GenerateProject), rootDir, pkgName)
}
