// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: token_service/token_service.proto

package token_service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type TransactOpts struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	PrivateKey  string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Nonce       int64  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Value       int64  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	GasPrice    int64  `protobuf:"varint,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit    int64  `protobuf:"varint,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *TransactOpts) Reset()      { *m = TransactOpts{} }
func (*TransactOpts) ProtoMessage() {}
func (*TransactOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{1}
}
func (m *TransactOpts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactOpts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransactOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactOpts.Merge(dst, src)
}
func (m *TransactOpts) XXX_Size() int {
	return m.Size()
}
func (m *TransactOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactOpts.DiscardUnknown(m)
}

var xxx_messageInfo_TransactOpts proto.InternalMessageInfo

func (m *TransactOpts) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *TransactOpts) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TransactOpts) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactOpts) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TransactOpts) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *TransactOpts) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type TransactionReq struct {
	Opts *TransactOpts `protobuf:"bytes,1,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *TransactionReq) Reset()      { *m = TransactionReq{} }
func (*TransactionReq) ProtoMessage() {}
func (*TransactionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{2}
}
func (m *TransactionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransactionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionReq.Merge(dst, src)
}
func (m *TransactionReq) XXX_Size() int {
	return m.Size()
}
func (m *TransactionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionReq.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionReq proto.InternalMessageInfo

func (m *TransactionReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type TransactionResp struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *TransactionResp) Reset()      { *m = TransactionResp{} }
func (*TransactionResp) ProtoMessage() {}
func (*TransactionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{3}
}
func (m *TransactionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransactionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionResp.Merge(dst, src)
}
func (m *TransactionResp) XXX_Size() int {
	return m.Size()
}
func (m *TransactionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionResp.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionResp proto.InternalMessageInfo

func (m *TransactionResp) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type AllowanceReq struct {
	Arg  string `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
	Arg2 string `protobuf:"bytes,2,opt,name=arg2,proto3" json:"arg2,omitempty"`
}

func (m *AllowanceReq) Reset()      { *m = AllowanceReq{} }
func (*AllowanceReq) ProtoMessage() {}
func (*AllowanceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{4}
}
func (m *AllowanceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowanceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowanceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AllowanceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowanceReq.Merge(dst, src)
}
func (m *AllowanceReq) XXX_Size() int {
	return m.Size()
}
func (m *AllowanceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowanceReq.DiscardUnknown(m)
}

var xxx_messageInfo_AllowanceReq proto.InternalMessageInfo

func (m *AllowanceReq) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

func (m *AllowanceReq) GetArg2() string {
	if m != nil {
		return m.Arg2
	}
	return ""
}

type AllowanceResp struct {
	Arg []byte `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *AllowanceResp) Reset()      { *m = AllowanceResp{} }
func (*AllowanceResp) ProtoMessage() {}
func (*AllowanceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{5}
}
func (m *AllowanceResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowanceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowanceResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AllowanceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowanceResp.Merge(dst, src)
}
func (m *AllowanceResp) XXX_Size() int {
	return m.Size()
}
func (m *AllowanceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowanceResp.DiscardUnknown(m)
}

var xxx_messageInfo_AllowanceResp proto.InternalMessageInfo

func (m *AllowanceResp) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type ApproveAndCallReq struct {
	Spender   string        `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	Value     []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExtraData [][]byte      `protobuf:"bytes,3,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Opts      *TransactOpts `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *ApproveAndCallReq) Reset()      { *m = ApproveAndCallReq{} }
func (*ApproveAndCallReq) ProtoMessage() {}
func (*ApproveAndCallReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{6}
}
func (m *ApproveAndCallReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveAndCallReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveAndCallReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApproveAndCallReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveAndCallReq.Merge(dst, src)
}
func (m *ApproveAndCallReq) XXX_Size() int {
	return m.Size()
}
func (m *ApproveAndCallReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveAndCallReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveAndCallReq proto.InternalMessageInfo

func (m *ApproveAndCallReq) GetSpender() string {
	if m != nil {
		return m.Spender
	}
	return ""
}

func (m *ApproveAndCallReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ApproveAndCallReq) GetExtraData() [][]byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ApproveAndCallReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type ApproveAndCallResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *ApproveAndCallResp) Reset()      { *m = ApproveAndCallResp{} }
func (*ApproveAndCallResp) ProtoMessage() {}
func (*ApproveAndCallResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{7}
}
func (m *ApproveAndCallResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveAndCallResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveAndCallResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApproveAndCallResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveAndCallResp.Merge(dst, src)
}
func (m *ApproveAndCallResp) XXX_Size() int {
	return m.Size()
}
func (m *ApproveAndCallResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveAndCallResp.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveAndCallResp proto.InternalMessageInfo

func (m *ApproveAndCallResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ApproveReq struct {
	Spender string        `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	Value   []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Opts    *TransactOpts `protobuf:"bytes,3,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *ApproveReq) Reset()      { *m = ApproveReq{} }
func (*ApproveReq) ProtoMessage() {}
func (*ApproveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{8}
}
func (m *ApproveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApproveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveReq.Merge(dst, src)
}
func (m *ApproveReq) XXX_Size() int {
	return m.Size()
}
func (m *ApproveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveReq proto.InternalMessageInfo

func (m *ApproveReq) GetSpender() string {
	if m != nil {
		return m.Spender
	}
	return ""
}

func (m *ApproveReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ApproveReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type ApproveResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *ApproveResp) Reset()      { *m = ApproveResp{} }
func (*ApproveResp) ProtoMessage() {}
func (*ApproveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{9}
}
func (m *ApproveResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApproveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveResp.Merge(dst, src)
}
func (m *ApproveResp) XXX_Size() int {
	return m.Size()
}
func (m *ApproveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveResp.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveResp proto.InternalMessageInfo

func (m *ApproveResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BalanceOfReq struct {
	Arg string `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *BalanceOfReq) Reset()      { *m = BalanceOfReq{} }
func (*BalanceOfReq) ProtoMessage() {}
func (*BalanceOfReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{10}
}
func (m *BalanceOfReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceOfReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceOfReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BalanceOfReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceOfReq.Merge(dst, src)
}
func (m *BalanceOfReq) XXX_Size() int {
	return m.Size()
}
func (m *BalanceOfReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceOfReq.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceOfReq proto.InternalMessageInfo

func (m *BalanceOfReq) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

type BalanceOfResp struct {
	Arg []byte `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *BalanceOfResp) Reset()      { *m = BalanceOfResp{} }
func (*BalanceOfResp) ProtoMessage() {}
func (*BalanceOfResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{11}
}
func (m *BalanceOfResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceOfResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceOfResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BalanceOfResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceOfResp.Merge(dst, src)
}
func (m *BalanceOfResp) XXX_Size() int {
	return m.Size()
}
func (m *BalanceOfResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceOfResp.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceOfResp proto.InternalMessageInfo

func (m *BalanceOfResp) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type BurnFromReq struct {
	From  string        `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Value []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Opts  *TransactOpts `protobuf:"bytes,3,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *BurnFromReq) Reset()      { *m = BurnFromReq{} }
func (*BurnFromReq) ProtoMessage() {}
func (*BurnFromReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{12}
}
func (m *BurnFromReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnFromReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnFromReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BurnFromReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnFromReq.Merge(dst, src)
}
func (m *BurnFromReq) XXX_Size() int {
	return m.Size()
}
func (m *BurnFromReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnFromReq.DiscardUnknown(m)
}

var xxx_messageInfo_BurnFromReq proto.InternalMessageInfo

func (m *BurnFromReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *BurnFromReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BurnFromReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type BurnFromResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *BurnFromResp) Reset()      { *m = BurnFromResp{} }
func (*BurnFromResp) ProtoMessage() {}
func (*BurnFromResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{13}
}
func (m *BurnFromResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnFromResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnFromResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BurnFromResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnFromResp.Merge(dst, src)
}
func (m *BurnFromResp) XXX_Size() int {
	return m.Size()
}
func (m *BurnFromResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnFromResp.DiscardUnknown(m)
}

var xxx_messageInfo_BurnFromResp proto.InternalMessageInfo

func (m *BurnFromResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BurnReq struct {
	Value []byte        `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Opts  *TransactOpts `protobuf:"bytes,2,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *BurnReq) Reset()      { *m = BurnReq{} }
func (*BurnReq) ProtoMessage() {}
func (*BurnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{14}
}
func (m *BurnReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BurnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnReq.Merge(dst, src)
}
func (m *BurnReq) XXX_Size() int {
	return m.Size()
}
func (m *BurnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnReq.DiscardUnknown(m)
}

var xxx_messageInfo_BurnReq proto.InternalMessageInfo

func (m *BurnReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BurnReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type BurnResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *BurnResp) Reset()      { *m = BurnResp{} }
func (*BurnResp) ProtoMessage() {}
func (*BurnResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{15}
}
func (m *BurnResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BurnResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnResp.Merge(dst, src)
}
func (m *BurnResp) XXX_Size() int {
	return m.Size()
}
func (m *BurnResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnResp.DiscardUnknown(m)
}

var xxx_messageInfo_BurnResp proto.InternalMessageInfo

func (m *BurnResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DecimalsResp struct {
	Arg []byte `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *DecimalsResp) Reset()      { *m = DecimalsResp{} }
func (*DecimalsResp) ProtoMessage() {}
func (*DecimalsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{16}
}
func (m *DecimalsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecimalsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecimalsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DecimalsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecimalsResp.Merge(dst, src)
}
func (m *DecimalsResp) XXX_Size() int {
	return m.Size()
}
func (m *DecimalsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DecimalsResp.DiscardUnknown(m)
}

var xxx_messageInfo_DecimalsResp proto.InternalMessageInfo

func (m *DecimalsResp) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type NameResp struct {
	Arg string `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *NameResp) Reset()      { *m = NameResp{} }
func (*NameResp) ProtoMessage() {}
func (*NameResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{17}
}
func (m *NameResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NameResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResp.Merge(dst, src)
}
func (m *NameResp) XXX_Size() int {
	return m.Size()
}
func (m *NameResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResp.DiscardUnknown(m)
}

var xxx_messageInfo_NameResp proto.InternalMessageInfo

func (m *NameResp) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

type OnApprovalReq struct {
	Owner   string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Value   []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *OnApprovalReq) Reset()      { *m = OnApprovalReq{} }
func (*OnApprovalReq) ProtoMessage() {}
func (*OnApprovalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{18}
}
func (m *OnApprovalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnApprovalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnApprovalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OnApprovalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnApprovalReq.Merge(dst, src)
}
func (m *OnApprovalReq) XXX_Size() int {
	return m.Size()
}
func (m *OnApprovalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OnApprovalReq.DiscardUnknown(m)
}

var xxx_messageInfo_OnApprovalReq proto.InternalMessageInfo

func (m *OnApprovalReq) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OnApprovalReq) GetSpender() string {
	if m != nil {
		return m.Spender
	}
	return ""
}

func (m *OnApprovalReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type OnBurnReq struct {
	From  string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *OnBurnReq) Reset()      { *m = OnBurnReq{} }
func (*OnBurnReq) ProtoMessage() {}
func (*OnBurnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{19}
}
func (m *OnBurnReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnBurnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnBurnReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OnBurnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnBurnReq.Merge(dst, src)
}
func (m *OnBurnReq) XXX_Size() int {
	return m.Size()
}
func (m *OnBurnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OnBurnReq.DiscardUnknown(m)
}

var xxx_messageInfo_OnBurnReq proto.InternalMessageInfo

func (m *OnBurnReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *OnBurnReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type OnTransferReq struct {
	From  string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To    string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *OnTransferReq) Reset()      { *m = OnTransferReq{} }
func (*OnTransferReq) ProtoMessage() {}
func (*OnTransferReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{20}
}
func (m *OnTransferReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnTransferReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnTransferReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OnTransferReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnTransferReq.Merge(dst, src)
}
func (m *OnTransferReq) XXX_Size() int {
	return m.Size()
}
func (m *OnTransferReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OnTransferReq.DiscardUnknown(m)
}

var xxx_messageInfo_OnTransferReq proto.InternalMessageInfo

func (m *OnTransferReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *OnTransferReq) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *OnTransferReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SymbolResp struct {
	Arg string `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *SymbolResp) Reset()      { *m = SymbolResp{} }
func (*SymbolResp) ProtoMessage() {}
func (*SymbolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{21}
}
func (m *SymbolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SymbolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SymbolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SymbolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymbolResp.Merge(dst, src)
}
func (m *SymbolResp) XXX_Size() int {
	return m.Size()
}
func (m *SymbolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SymbolResp.DiscardUnknown(m)
}

var xxx_messageInfo_SymbolResp proto.InternalMessageInfo

func (m *SymbolResp) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

type TotalSupplyResp struct {
	Arg []byte `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (m *TotalSupplyResp) Reset()      { *m = TotalSupplyResp{} }
func (*TotalSupplyResp) ProtoMessage() {}
func (*TotalSupplyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{22}
}
func (m *TotalSupplyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalSupplyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalSupplyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TotalSupplyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalSupplyResp.Merge(dst, src)
}
func (m *TotalSupplyResp) XXX_Size() int {
	return m.Size()
}
func (m *TotalSupplyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalSupplyResp.DiscardUnknown(m)
}

var xxx_messageInfo_TotalSupplyResp proto.InternalMessageInfo

func (m *TotalSupplyResp) GetArg() []byte {
	if m != nil {
		return m.Arg
	}
	return nil
}

type TransferFromReq struct {
	From  string        `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To    string        `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Value []byte        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Opts  *TransactOpts `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *TransferFromReq) Reset()      { *m = TransferFromReq{} }
func (*TransferFromReq) ProtoMessage() {}
func (*TransferFromReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{23}
}
func (m *TransferFromReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFromReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFromReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferFromReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFromReq.Merge(dst, src)
}
func (m *TransferFromReq) XXX_Size() int {
	return m.Size()
}
func (m *TransferFromReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFromReq.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFromReq proto.InternalMessageInfo

func (m *TransferFromReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransferFromReq) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransferFromReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransferFromReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type TransferFromResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *TransferFromResp) Reset()      { *m = TransferFromResp{} }
func (*TransferFromResp) ProtoMessage() {}
func (*TransferFromResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{24}
}
func (m *TransferFromResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFromResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFromResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferFromResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFromResp.Merge(dst, src)
}
func (m *TransferFromResp) XXX_Size() int {
	return m.Size()
}
func (m *TransferFromResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFromResp.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFromResp proto.InternalMessageInfo

func (m *TransferFromResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type TransferReq struct {
	To    string        `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Value []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Opts  *TransactOpts `protobuf:"bytes,3,opt,name=opts,proto3" json:"opts,omitempty"`
}

func (m *TransferReq) Reset()      { *m = TransferReq{} }
func (*TransferReq) ProtoMessage() {}
func (*TransferReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{25}
}
func (m *TransferReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferReq.Merge(dst, src)
}
func (m *TransferReq) XXX_Size() int {
	return m.Size()
}
func (m *TransferReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferReq.DiscardUnknown(m)
}

var xxx_messageInfo_TransferReq proto.InternalMessageInfo

func (m *TransferReq) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransferReq) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TransferReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type TransferResp struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *TransferResp) Reset()      { *m = TransferResp{} }
func (*TransferResp) ProtoMessage() {}
func (*TransferResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_token_service_34739c0a4044fa46, []int{26}
}
func (m *TransferResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResp.Merge(dst, src)
}
func (m *TransferResp) XXX_Size() int {
	return m.Size()
}
func (m *TransferResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResp.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResp proto.InternalMessageInfo

func (m *TransferResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "token_service.Empty")
	proto.RegisterType((*TransactOpts)(nil), "token_service.TransactOpts")
	proto.RegisterType((*TransactionReq)(nil), "token_service.TransactionReq")
	proto.RegisterType((*TransactionResp)(nil), "token_service.TransactionResp")
	proto.RegisterType((*AllowanceReq)(nil), "token_service.AllowanceReq")
	proto.RegisterType((*AllowanceResp)(nil), "token_service.AllowanceResp")
	proto.RegisterType((*ApproveAndCallReq)(nil), "token_service.ApproveAndCallReq")
	proto.RegisterType((*ApproveAndCallResp)(nil), "token_service.ApproveAndCallResp")
	proto.RegisterType((*ApproveReq)(nil), "token_service.ApproveReq")
	proto.RegisterType((*ApproveResp)(nil), "token_service.ApproveResp")
	proto.RegisterType((*BalanceOfReq)(nil), "token_service.BalanceOfReq")
	proto.RegisterType((*BalanceOfResp)(nil), "token_service.BalanceOfResp")
	proto.RegisterType((*BurnFromReq)(nil), "token_service.BurnFromReq")
	proto.RegisterType((*BurnFromResp)(nil), "token_service.BurnFromResp")
	proto.RegisterType((*BurnReq)(nil), "token_service.BurnReq")
	proto.RegisterType((*BurnResp)(nil), "token_service.BurnResp")
	proto.RegisterType((*DecimalsResp)(nil), "token_service.DecimalsResp")
	proto.RegisterType((*NameResp)(nil), "token_service.NameResp")
	proto.RegisterType((*OnApprovalReq)(nil), "token_service.OnApprovalReq")
	proto.RegisterType((*OnBurnReq)(nil), "token_service.OnBurnReq")
	proto.RegisterType((*OnTransferReq)(nil), "token_service.OnTransferReq")
	proto.RegisterType((*SymbolResp)(nil), "token_service.SymbolResp")
	proto.RegisterType((*TotalSupplyResp)(nil), "token_service.TotalSupplyResp")
	proto.RegisterType((*TransferFromReq)(nil), "token_service.TransferFromReq")
	proto.RegisterType((*TransferFromResp)(nil), "token_service.TransferFromResp")
	proto.RegisterType((*TransferReq)(nil), "token_service.TransferReq")
	proto.RegisterType((*TransferResp)(nil), "token_service.TransferResp")
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TransactOpts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransactOpts)
	if !ok {
		that2, ok := that.(TransactOpts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromAddress != that1.FromAddress {
		return false
	}
	if this.PrivateKey != that1.PrivateKey {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.GasPrice != that1.GasPrice {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	return true
}
func (this *TransactionReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransactionReq)
	if !ok {
		that2, ok := that.(TransactionReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *TransactionResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransactionResp)
	if !ok {
		that2, ok := that.(TransactionResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	return true
}
func (this *AllowanceReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowanceReq)
	if !ok {
		that2, ok := that.(AllowanceReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arg != that1.Arg {
		return false
	}
	if this.Arg2 != that1.Arg2 {
		return false
	}
	return true
}
func (this *AllowanceResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowanceResp)
	if !ok {
		that2, ok := that.(AllowanceResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Arg, that1.Arg) {
		return false
	}
	return true
}
func (this *ApproveAndCallReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApproveAndCallReq)
	if !ok {
		that2, ok := that.(ApproveAndCallReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Spender != that1.Spender {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if len(this.ExtraData) != len(that1.ExtraData) {
		return false
	}
	for i := range this.ExtraData {
		if !bytes.Equal(this.ExtraData[i], that1.ExtraData[i]) {
			return false
		}
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *ApproveAndCallResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApproveAndCallResp)
	if !ok {
		that2, ok := that.(ApproveAndCallResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *ApproveReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApproveReq)
	if !ok {
		that2, ok := that.(ApproveReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Spender != that1.Spender {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *ApproveResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApproveResp)
	if !ok {
		that2, ok := that.(ApproveResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *BalanceOfReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BalanceOfReq)
	if !ok {
		that2, ok := that.(BalanceOfReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arg != that1.Arg {
		return false
	}
	return true
}
func (this *BalanceOfResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BalanceOfResp)
	if !ok {
		that2, ok := that.(BalanceOfResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Arg, that1.Arg) {
		return false
	}
	return true
}
func (this *BurnFromReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BurnFromReq)
	if !ok {
		that2, ok := that.(BurnFromReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *BurnFromResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BurnFromResp)
	if !ok {
		that2, ok := that.(BurnFromResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *BurnReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BurnReq)
	if !ok {
		that2, ok := that.(BurnReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *BurnResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BurnResp)
	if !ok {
		that2, ok := that.(BurnResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *DecimalsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecimalsResp)
	if !ok {
		that2, ok := that.(DecimalsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Arg, that1.Arg) {
		return false
	}
	return true
}
func (this *NameResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameResp)
	if !ok {
		that2, ok := that.(NameResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arg != that1.Arg {
		return false
	}
	return true
}
func (this *OnApprovalReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OnApprovalReq)
	if !ok {
		that2, ok := that.(OnApprovalReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Spender != that1.Spender {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *OnBurnReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OnBurnReq)
	if !ok {
		that2, ok := that.(OnBurnReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *OnTransferReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OnTransferReq)
	if !ok {
		that2, ok := that.(OnTransferReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *SymbolResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SymbolResp)
	if !ok {
		that2, ok := that.(SymbolResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arg != that1.Arg {
		return false
	}
	return true
}
func (this *TotalSupplyResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TotalSupplyResp)
	if !ok {
		that2, ok := that.(TotalSupplyResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Arg, that1.Arg) {
		return false
	}
	return true
}
func (this *TransferFromReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferFromReq)
	if !ok {
		that2, ok := that.(TransferFromReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *TransferFromResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferFromResp)
	if !ok {
		that2, ok := that.(TransferFromResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *TransferReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferReq)
	if !ok {
		that2, ok := that.(TransferReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !this.Opts.Equal(that1.Opts) {
		return false
	}
	return true
}
func (this *TransferResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferResp)
	if !ok {
		that2, ok := that.(TransferResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&token_service.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransactOpts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&token_service.TransactOpts{")
	s = append(s, "FromAddress: "+fmt.Sprintf("%#v", this.FromAddress)+",\n")
	s = append(s, "PrivateKey: "+fmt.Sprintf("%#v", this.PrivateKey)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "GasPrice: "+fmt.Sprintf("%#v", this.GasPrice)+",\n")
	s = append(s, "GasLimit: "+fmt.Sprintf("%#v", this.GasLimit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransactionReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.TransactionReq{")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransactionResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.TransactionResp{")
	s = append(s, "TxHash: "+fmt.Sprintf("%#v", this.TxHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllowanceReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&token_service.AllowanceReq{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "Arg2: "+fmt.Sprintf("%#v", this.Arg2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllowanceResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.AllowanceResp{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApproveAndCallReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&token_service.ApproveAndCallReq{")
	s = append(s, "Spender: "+fmt.Sprintf("%#v", this.Spender)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ExtraData: "+fmt.Sprintf("%#v", this.ExtraData)+",\n")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApproveAndCallResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.ApproveAndCallResp{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApproveReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&token_service.ApproveReq{")
	s = append(s, "Spender: "+fmt.Sprintf("%#v", this.Spender)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApproveResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.ApproveResp{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BalanceOfReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.BalanceOfReq{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BalanceOfResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.BalanceOfResp{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BurnFromReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&token_service.BurnFromReq{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BurnFromResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.BurnFromResp{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BurnReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&token_service.BurnReq{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BurnResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.BurnResp{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DecimalsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.DecimalsResp{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NameResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.NameResp{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnApprovalReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&token_service.OnApprovalReq{")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "Spender: "+fmt.Sprintf("%#v", this.Spender)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnBurnReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&token_service.OnBurnReq{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnTransferReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&token_service.OnTransferReq{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SymbolResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.SymbolResp{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TotalSupplyResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.TotalSupplyResp{")
	s = append(s, "Arg: "+fmt.Sprintf("%#v", this.Arg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferFromReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&token_service.TransferFromReq{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferFromResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.TransferFromResp{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&token_service.TransferReq{")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Opts != nil {
		s = append(s, "Opts: "+fmt.Sprintf("%#v", this.Opts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&token_service.TransferResp{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTokenService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	Allowance(ctx context.Context, in *AllowanceReq, opts ...grpc.CallOption) (*AllowanceResp, error)
	Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*TransactionResp, error)
	ApproveAndCall(ctx context.Context, in *ApproveAndCallReq, opts ...grpc.CallOption) (*TransactionResp, error)
	BalanceOf(ctx context.Context, in *BalanceOfReq, opts ...grpc.CallOption) (*BalanceOfResp, error)
	Burn(ctx context.Context, in *BurnReq, opts ...grpc.CallOption) (*TransactionResp, error)
	BurnFrom(ctx context.Context, in *BurnFromReq, opts ...grpc.CallOption) (*TransactionResp, error)
	Decimals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DecimalsResp, error)
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResp, error)
	Symbol(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SymbolResp, error)
	TotalSupply(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TotalSupplyResp, error)
	Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransactionResp, error)
	TransferFrom(ctx context.Context, in *TransferFromReq, opts ...grpc.CallOption) (*TransactionResp, error)
	OnApproval(ctx context.Context, in *OnApprovalReq, opts ...grpc.CallOption) (*TransactionResp, error)
	OnBurn(ctx context.Context, in *OnBurnReq, opts ...grpc.CallOption) (*TransactionResp, error)
	OnTransfer(ctx context.Context, in *OnTransferReq, opts ...grpc.CallOption) (*TransactionResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) Allowance(ctx context.Context, in *AllowanceReq, opts ...grpc.CallOption) (*AllowanceResp, error) {
	out := new(AllowanceResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/allowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) ApproveAndCall(ctx context.Context, in *ApproveAndCallReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/approveAndCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) BalanceOf(ctx context.Context, in *BalanceOfReq, opts ...grpc.CallOption) (*BalanceOfResp, error) {
	out := new(BalanceOfResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/balanceOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Burn(ctx context.Context, in *BurnReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) BurnFrom(ctx context.Context, in *BurnFromReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/burnFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Decimals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DecimalsResp, error) {
	out := new(DecimalsResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/decimals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NameResp, error) {
	out := new(NameResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Symbol(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SymbolResp, error) {
	out := new(SymbolResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/symbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) TotalSupply(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TotalSupplyResp, error) {
	out := new(TotalSupplyResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/totalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) TransferFrom(ctx context.Context, in *TransferFromReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/transferFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) OnApproval(ctx context.Context, in *OnApprovalReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/onApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) OnBurn(ctx context.Context, in *OnBurnReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/onBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) OnTransfer(ctx context.Context, in *OnTransferReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, "/token_service.Token/onTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	Allowance(context.Context, *AllowanceReq) (*AllowanceResp, error)
	Approve(context.Context, *ApproveReq) (*TransactionResp, error)
	ApproveAndCall(context.Context, *ApproveAndCallReq) (*TransactionResp, error)
	BalanceOf(context.Context, *BalanceOfReq) (*BalanceOfResp, error)
	Burn(context.Context, *BurnReq) (*TransactionResp, error)
	BurnFrom(context.Context, *BurnFromReq) (*TransactionResp, error)
	Decimals(context.Context, *Empty) (*DecimalsResp, error)
	Name(context.Context, *Empty) (*NameResp, error)
	Symbol(context.Context, *Empty) (*SymbolResp, error)
	TotalSupply(context.Context, *Empty) (*TotalSupplyResp, error)
	Transfer(context.Context, *TransferReq) (*TransactionResp, error)
	TransferFrom(context.Context, *TransferFromReq) (*TransactionResp, error)
	OnApproval(context.Context, *OnApprovalReq) (*TransactionResp, error)
	OnBurn(context.Context, *OnBurnReq) (*TransactionResp, error)
	OnTransfer(context.Context, *OnTransferReq) (*TransactionResp, error)
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_Allowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Allowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Allowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Allowance(ctx, req.(*AllowanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Approve(ctx, req.(*ApproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_ApproveAndCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAndCallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).ApproveAndCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/ApproveAndCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).ApproveAndCall(ctx, req.(*ApproveAndCallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_BalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceOfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).BalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/BalanceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).BalanceOf(ctx, req.(*BalanceOfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Burn(ctx, req.(*BurnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_BurnFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnFromReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).BurnFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/BurnFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).BurnFrom(ctx, req.(*BurnFromReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_Decimals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Decimals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Decimals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Decimals(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_Symbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Symbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Symbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Symbol(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).TotalSupply(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).Transfer(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_TransferFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFromReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).TransferFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/TransferFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).TransferFrom(ctx, req.(*TransferFromReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_OnApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnApprovalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).OnApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/OnApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).OnApproval(ctx, req.(*OnApprovalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_OnBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBurnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).OnBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/OnBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).OnBurn(ctx, req.(*OnBurnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_OnTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).OnTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_service.Token/OnTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).OnTransfer(ctx, req.(*OnTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "token_service.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "allowance",
			Handler:    _Token_Allowance_Handler,
		},
		{
			MethodName: "approve",
			Handler:    _Token_Approve_Handler,
		},
		{
			MethodName: "approveAndCall",
			Handler:    _Token_ApproveAndCall_Handler,
		},
		{
			MethodName: "balanceOf",
			Handler:    _Token_BalanceOf_Handler,
		},
		{
			MethodName: "burn",
			Handler:    _Token_Burn_Handler,
		},
		{
			MethodName: "burnFrom",
			Handler:    _Token_BurnFrom_Handler,
		},
		{
			MethodName: "decimals",
			Handler:    _Token_Decimals_Handler,
		},
		{
			MethodName: "name",
			Handler:    _Token_Name_Handler,
		},
		{
			MethodName: "symbol",
			Handler:    _Token_Symbol_Handler,
		},
		{
			MethodName: "totalSupply",
			Handler:    _Token_TotalSupply_Handler,
		},
		{
			MethodName: "transfer",
			Handler:    _Token_Transfer_Handler,
		},
		{
			MethodName: "transferFrom",
			Handler:    _Token_TransferFrom_Handler,
		},
		{
			MethodName: "onApproval",
			Handler:    _Token_OnApproval_Handler,
		},
		{
			MethodName: "onBurn",
			Handler:    _Token_OnBurn_Handler,
		},
		{
			MethodName: "onTransfer",
			Handler:    _Token_OnTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_service/token_service.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TransactOpts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactOpts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.FromAddress)))
		i += copy(dAtA[i:], m.FromAddress)
	}
	if len(m.PrivateKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.PrivateKey)))
		i += copy(dAtA[i:], m.PrivateKey)
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Nonce))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Value))
	}
	if m.GasPrice != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.GasPrice))
	}
	if m.GasLimit != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.GasLimit))
	}
	return i, nil
}

func (m *TransactionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Opts != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n1, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TransactionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.TxHash)))
		i += copy(dAtA[i:], m.TxHash)
	}
	return i, nil
}

func (m *AllowanceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowanceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	if len(m.Arg2) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg2)))
		i += copy(dAtA[i:], m.Arg2)
	}
	return i, nil
}

func (m *AllowanceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowanceResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *ApproveAndCallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveAndCallReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Spender)))
		i += copy(dAtA[i:], m.Spender)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.ExtraData) > 0 {
		for _, b := range m.ExtraData {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTokenService(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Opts != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n2, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ApproveAndCallResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveAndCallResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ApproveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spender) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Spender)))
		i += copy(dAtA[i:], m.Spender)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Opts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n3, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ApproveResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BalanceOfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceOfReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *BalanceOfResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceOfResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *BurnFromReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnFromReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Opts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n4, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *BurnFromResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnFromResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BurnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Opts != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n5, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *BurnResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DecimalsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecimalsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *NameResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *OnApprovalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnApprovalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Spender) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Spender)))
		i += copy(dAtA[i:], m.Spender)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *OnBurnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnBurnReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *OnTransferReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnTransferReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SymbolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymbolResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *TotalSupplyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalSupplyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Arg)))
		i += copy(dAtA[i:], m.Arg)
	}
	return i, nil
}

func (m *TransferFromReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFromReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Opts != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n6, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *TransferFromResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFromResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TransferReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Opts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTokenService(dAtA, i, uint64(m.Opts.Size()))
		n7, err := m.Opts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *TransferResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintTokenService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TransactOpts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTokenService(uint64(m.Nonce))
	}
	if m.Value != 0 {
		n += 1 + sovTokenService(uint64(m.Value))
	}
	if m.GasPrice != 0 {
		n += 1 + sovTokenService(uint64(m.GasPrice))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTokenService(uint64(m.GasLimit))
	}
	return n
}

func (m *TransactionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *TransactionResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *AllowanceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Arg2)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *AllowanceResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *ApproveAndCallReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spender)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if len(m.ExtraData) > 0 {
		for _, b := range m.ExtraData {
			l = len(b)
			n += 1 + l + sovTokenService(uint64(l))
		}
	}
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *ApproveAndCallResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *ApproveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Spender)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *ApproveResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *BalanceOfReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *BalanceOfResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *BurnFromReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *BurnFromResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *BurnReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *BurnResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *DecimalsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *NameResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *OnApprovalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Spender)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *OnBurnReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *OnTransferReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *SymbolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *TotalSupplyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arg)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *TransferFromReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *TransferFromResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *TransferReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTokenService(uint64(l))
	}
	if m.Opts != nil {
		l = m.Opts.Size()
		n += 1 + l + sovTokenService(uint64(l))
	}
	return n
}

func (m *TransferResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovTokenService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTokenService(x uint64) (n int) {
	return sovTokenService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *TransactOpts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactOpts{`,
		`FromAddress:` + fmt.Sprintf("%v", this.FromAddress) + `,`,
		`PrivateKey:` + fmt.Sprintf("%v", this.PrivateKey) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`GasPrice:` + fmt.Sprintf("%v", this.GasPrice) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransactionReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactionReq{`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransactionResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactionResp{`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowanceReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowanceReq{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`Arg2:` + fmt.Sprintf("%v", this.Arg2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowanceResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowanceResp{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApproveAndCallReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApproveAndCallReq{`,
		`Spender:` + fmt.Sprintf("%v", this.Spender) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ExtraData:` + fmt.Sprintf("%v", this.ExtraData) + `,`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApproveAndCallResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApproveAndCallResp{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApproveReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApproveReq{`,
		`Spender:` + fmt.Sprintf("%v", this.Spender) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApproveResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApproveResp{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BalanceOfReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BalanceOfReq{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BalanceOfResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BalanceOfResp{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BurnFromReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BurnFromReq{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BurnFromResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BurnFromResp{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BurnReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BurnReq{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BurnResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BurnResp{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecimalsResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecimalsResp{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NameResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NameResp{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnApprovalReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnApprovalReq{`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`Spender:` + fmt.Sprintf("%v", this.Spender) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnBurnReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnBurnReq{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnTransferReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnTransferReq{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SymbolResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SymbolResp{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TotalSupplyResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TotalSupplyResp{`,
		`Arg:` + fmt.Sprintf("%v", this.Arg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferFromReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferFromReq{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferFromResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferFromResp{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferReq{`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Opts:` + strings.Replace(fmt.Sprintf("%v", this.Opts), "TransactOpts", "TransactOpts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferResp{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTokenService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactOpts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactOpts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactOpts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowanceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowanceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowanceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowanceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowanceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowanceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveAndCallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveAndCallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveAndCallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData, make([]byte, postIndex-iNdEx))
			copy(m.ExtraData[len(m.ExtraData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveAndCallResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveAndCallResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveAndCallResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceOfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceOfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceOfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceOfResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceOfResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceOfResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnFromReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnFromReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnFromReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnFromResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnFromResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnFromResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecimalsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecimalsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecimalsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnApprovalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnApprovalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnApprovalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnBurnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnBurnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnBurnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnTransferReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnTransferReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnTransferReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymbolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymbolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymbolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalSupplyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalSupplyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalSupplyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arg = append(m.Arg[:0], dAtA[iNdEx:postIndex]...)
			if m.Arg == nil {
				m.Arg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFromReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFromReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFromReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFromResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFromResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFromResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opts == nil {
				m.Opts = &TransactOpts{}
			}
			if err := m.Opts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokenService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTokenService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTokenService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTokenService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTokenService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTokenService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("token_service/token_service.proto", fileDescriptor_token_service_34739c0a4044fa46)
}

var fileDescriptor_token_service_34739c0a4044fa46 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0x8e, 0x93, 0xb4, 0x4d, 0x7e, 0x49, 0xff, 0xec, 0x6c, 0x69, 0xdd, 0xb4, 0xeb, 0x6d, 0x07,
	0x24, 0xaa, 0x15, 0x69, 0xa5, 0xb2, 0x1c, 0x40, 0xe2, 0xd0, 0xb2, 0x20, 0x10, 0x7f, 0xba, 0xca,
	0x96, 0x0b, 0x12, 0x8a, 0x26, 0xce, 0x34, 0xb5, 0xd6, 0x99, 0xf1, 0xda, 0x93, 0x6e, 0x2b, 0x71,
	0x40, 0x3c, 0x01, 0xd2, 0xbe, 0x02, 0x07, 0x1e, 0x81, 0x47, 0xe0, 0x58, 0x89, 0xcb, 0x1e, 0x69,
	0xca, 0x81, 0xe3, 0x3e, 0x02, 0x9a, 0xf1, 0xd8, 0xb5, 0x9d, 0x38, 0x49, 0x81, 0x5b, 0x66, 0x3c,
	0xf3, 0x7d, 0xdf, 0xef, 0xfb, 0xcd, 0x7c, 0xd3, 0xc2, 0x8e, 0xe0, 0xcf, 0x29, 0x6b, 0x07, 0xd4,
	0x3f, 0x77, 0x6c, 0xba, 0x9f, 0x1a, 0xed, 0x79, 0x3e, 0x17, 0x1c, 0x2d, 0xa6, 0x26, 0x1b, 0x5b,
	0x3d, 0xce, 0x7b, 0x2e, 0xdd, 0x27, 0x9e, 0xb3, 0x4f, 0x18, 0xe3, 0x82, 0x08, 0x87, 0xb3, 0x20,
	0x5c, 0x8c, 0x17, 0x60, 0xee, 0xd3, 0xbe, 0x27, 0x2e, 0xf1, 0x6f, 0x06, 0xd4, 0x4f, 0x7c, 0xc2,
	0x02, 0x62, 0x8b, 0x63, 0x4f, 0x04, 0x68, 0x07, 0xea, 0xa7, 0x3e, 0xef, 0xb7, 0x49, 0xb7, 0xeb,
	0xd3, 0x20, 0x30, 0x8d, 0x6d, 0x63, 0xb7, 0xda, 0xaa, 0xc9, 0xb9, 0xc3, 0x70, 0x0a, 0x3d, 0x84,
	0x9a, 0xe7, 0x3b, 0xe7, 0x44, 0xd0, 0xf6, 0x73, 0x7a, 0x69, 0x16, 0xd5, 0x0a, 0xd0, 0x53, 0x5f,
	0xd2, 0x4b, 0xb4, 0x0a, 0x73, 0x8c, 0x33, 0x9b, 0x9a, 0xa5, 0x6d, 0x63, 0xb7, 0xd4, 0x0a, 0x07,
	0x72, 0xf6, 0x9c, 0xb8, 0x03, 0x6a, 0x96, 0xc3, 0x59, 0x35, 0x40, 0x9b, 0x50, 0xed, 0x91, 0xa0,
	0xed, 0xf9, 0x8e, 0x4d, 0xcd, 0x39, 0xf5, 0xa5, 0xd2, 0x23, 0xc1, 0x53, 0x39, 0x8e, 0x3e, 0xba,
	0x4e, 0xdf, 0x11, 0xe6, 0x7c, 0xfc, 0xf1, 0x2b, 0x39, 0xc6, 0x87, 0xb0, 0x14, 0x29, 0x77, 0x38,
	0x6b, 0xd1, 0x17, 0x68, 0x1f, 0xca, 0xdc, 0x13, 0xa1, 0xe6, 0xda, 0xc1, 0xe6, 0x5e, 0xda, 0xa6,
	0x64, 0x99, 0x2d, 0xb5, 0x10, 0x3f, 0x82, 0xe5, 0x14, 0x44, 0xe0, 0xa1, 0x75, 0x58, 0x10, 0x17,
	0xed, 0x33, 0x12, 0x9c, 0xe9, 0xd2, 0xe7, 0xc5, 0xc5, 0xe7, 0x24, 0x38, 0xc3, 0x8f, 0xa1, 0x7e,
	0xe8, 0xba, 0xfc, 0x25, 0x61, 0x36, 0x95, 0x64, 0x2b, 0x50, 0x22, 0x7e, 0x4f, 0x2f, 0x92, 0x3f,
	0x11, 0x82, 0x32, 0xf1, 0x7b, 0x07, 0xda, 0x10, 0xf5, 0x1b, 0xef, 0xc0, 0x62, 0x62, 0x57, 0xe0,
	0x25, 0xb7, 0xd5, 0xd5, 0x36, 0xfc, 0xca, 0x80, 0x7b, 0x87, 0x9e, 0xe7, 0xf3, 0x73, 0x7a, 0xc8,
	0xba, 0x9f, 0x10, 0xd7, 0x95, 0xf0, 0x26, 0x2c, 0x04, 0x1e, 0x65, 0x5d, 0xea, 0x6b, 0x8a, 0x68,
	0x78, 0xeb, 0x63, 0x51, 0x61, 0x68, 0x1f, 0x1f, 0x00, 0xd0, 0x0b, 0xe1, 0x93, 0x76, 0x97, 0x08,
	0x62, 0x96, 0xb6, 0x4b, 0xbb, 0xf5, 0x56, 0x55, 0xcd, 0x3c, 0x21, 0x82, 0xc4, 0xd6, 0x94, 0x67,
	0xb5, 0x66, 0x0f, 0x50, 0x56, 0x54, 0xe0, 0x29, 0x55, 0x03, 0xdb, 0x8e, 0x0e, 0x46, 0xa5, 0x15,
	0x0d, 0x71, 0x1f, 0x40, 0xaf, 0xff, 0x37, 0xea, 0x23, 0x79, 0xa5, 0x59, 0xe5, 0xbd, 0x0b, 0xb5,
	0x98, 0x6e, 0xa2, 0xae, 0x6d, 0xa8, 0x1f, 0x11, 0x57, 0xda, 0x7f, 0x7c, 0x3a, 0xb6, 0x6d, 0xb2,
	0x45, 0x89, 0x15, 0x63, 0x5b, 0x74, 0x06, 0xb5, 0xa3, 0x81, 0xcf, 0x3e, 0xf3, 0x79, 0x5f, 0x62,
	0x20, 0x28, 0xcb, 0xfb, 0xa0, 0x41, 0xd4, 0xef, 0xff, 0xab, 0xae, 0x5d, 0xa8, 0xdf, 0x32, 0x4d,
	0x2c, 0xec, 0x29, 0x2c, 0xc8, 0x95, 0x52, 0x4f, 0xcc, 0x6d, 0x8c, 0xe3, 0x2e, 0xce, 0xca, 0xfd,
	0x0e, 0x54, 0x42, 0xc4, 0x69, 0x86, 0x3e, 0xa1, 0xb6, 0xd3, 0x27, 0x6e, 0x90, 0xe3, 0xd6, 0x16,
	0x54, 0xbe, 0x21, 0xfd, 0x91, 0xe3, 0xae, 0xed, 0xfe, 0x16, 0x16, 0x8f, 0x59, 0xd8, 0x3b, 0xe2,
	0x6a, 0xf5, 0xfc, 0x25, 0x8b, 0x4f, 0x4a, 0x38, 0x48, 0x9e, 0xa0, 0x62, 0xce, 0x09, 0x2a, 0x25,
	0xaa, 0xc5, 0x1f, 0x40, 0xf5, 0x98, 0x45, 0x86, 0xcc, 0xdc, 0x20, 0xfc, 0x85, 0x54, 0xa3, 0xbc,
	0x38, 0xa5, 0x7e, 0xde, 0xd6, 0x25, 0x28, 0x0a, 0xae, 0x65, 0x14, 0x05, 0xcf, 0x51, 0x60, 0x01,
	0x3c, 0xbb, 0xec, 0x77, 0xb8, 0x9b, 0x53, 0xf8, 0xdb, 0xb0, 0x7c, 0xc2, 0x05, 0x71, 0x9f, 0x0d,
	0x3c, 0xcf, 0xbd, 0xcc, 0xf1, 0xee, 0x07, 0x9d, 0x48, 0xa7, 0xd4, 0x9f, 0x74, 0xda, 0x66, 0x52,
	0x74, 0xf7, 0x4b, 0xff, 0x1e, 0xac, 0xa4, 0xd9, 0x27, 0x9e, 0x84, 0x2e, 0xd4, 0x92, 0xce, 0x85,
	0x9a, 0x8c, 0x51, 0x4d, 0xff, 0xf9, 0x46, 0xdc, 0xb2, 0x4c, 0xd2, 0x73, 0xf0, 0x4b, 0x0d, 0xe6,
	0x4e, 0x24, 0x1c, 0xb2, 0xa1, 0x4a, 0xa2, 0xd4, 0x45, 0x59, 0x8e, 0x64, 0x8a, 0x37, 0xb6, 0xf2,
	0x3f, 0x06, 0x1e, 0xde, 0xfc, 0xe9, 0x8f, 0xbf, 0x5e, 0x15, 0xdf, 0xc2, 0x2b, 0xe1, 0x8b, 0xbb,
	0x1f, 0x83, 0x7e, 0x64, 0x3c, 0x42, 0x6d, 0x58, 0x20, 0x61, 0x04, 0xa1, 0x8d, 0x2c, 0x4a, 0x9c,
	0x84, 0x0d, 0x2b, 0xa7, 0x42, 0xfd, 0xde, 0xe0, 0x0d, 0x45, 0x71, 0x1f, 0x2f, 0x45, 0x14, 0xe1,
	0x56, 0x49, 0x70, 0x0e, 0x4b, 0x24, 0x15, 0xc1, 0x68, 0x7b, 0x3c, 0xcf, 0xed, 0xb3, 0x31, 0x95,
	0x0e, 0x2b, 0xba, 0x2d, 0xbc, 0x9e, 0xa6, 0x6b, 0x12, 0xd6, 0x6d, 0xda, 0xc4, 0x75, 0x25, 0x6f,
	0x17, 0xaa, 0x9d, 0x28, 0x10, 0x47, 0xdc, 0x4b, 0x86, 0xe9, 0x88, 0x7b, 0xa9, 0x1c, 0xc5, 0x5b,
	0x8a, 0x6b, 0x0d, 0xdf, 0xd3, 0x5c, 0x1a, 0xb4, 0xc9, 0x4f, 0x25, 0xcb, 0x77, 0x50, 0xee, 0x0c,
	0x7c, 0x86, 0xd6, 0xb2, 0x18, 0xe1, 0x1d, 0x9e, 0x5a, 0x49, 0x43, 0xa1, 0xaf, 0xe2, 0xe5, 0x08,
	0x7d, 0xe0, 0xb3, 0xa6, 0x4f, 0x5f, 0x48, 0x6c, 0x1b, 0x2a, 0x1d, 0x9d, 0xa2, 0xa8, 0x31, 0x06,
	0x5f, 0x5f, 0xad, 0xa9, 0x1c, 0xd9, 0xfe, 0x2b, 0x0e, 0x79, 0x01, 0x25, 0xc9, 0xc7, 0x50, 0xe9,
	0xea, 0x20, 0x44, 0xab, 0x19, 0x20, 0xf5, 0xc7, 0x55, 0x23, 0xeb, 0x5d, 0x2a, 0x37, 0xbf, 0x86,
	0x32, 0x23, 0x7d, 0x9a, 0xb3, 0x75, 0x3d, 0x33, 0x1b, 0x05, 0x2a, 0x5e, 0x53, 0x92, 0x56, 0x70,
	0x4d, 0x4b, 0x92, 0x18, 0x52, 0xcd, 0x87, 0x30, 0x1f, 0xa8, 0xf4, 0xc9, 0x01, 0xcc, 0x1e, 0xd1,
	0x44, 0x54, 0xd9, 0x50, 0x13, 0xb7, 0xc1, 0x94, 0xb3, 0x7f, 0xc4, 0xaa, 0x74, 0x94, 0x61, 0x4b,
	0xe9, 0x32, 0xf1, 0x7d, 0xad, 0x4b, 0x21, 0x36, 0x03, 0xb5, 0x40, 0xea, 0xeb, 0x40, 0x45, 0xe8,
	0x6b, 0x3c, 0xd2, 0x92, 0x44, 0x8a, 0xdc, 0xb9, 0xed, 0x11, 0xa8, 0xe4, 0xe0, 0x50, 0x17, 0x89,
	0xf8, 0x42, 0x56, 0x0e, 0xcf, 0xac, 0xed, 0x7f, 0xa8, 0xb8, 0x36, 0xf0, 0x6a, 0x86, 0x2b, 0x3e,
	0x02, 0x0e, 0x00, 0x8f, 0xdf, 0x32, 0x94, 0xbd, 0x0d, 0xa9, 0x67, 0x6e, 0x2a, 0xd9, 0x03, 0x45,
	0xb6, 0x8e, 0x91, 0x26, 0xe3, 0xac, 0x49, 0xf4, 0x76, 0x49, 0xf5, 0x3d, 0xcc, 0x73, 0xf5, 0xbe,
	0x21, 0x73, 0x84, 0x66, 0xd6, 0x2b, 0x93, 0xcd, 0x1a, 0xce, 0x9a, 0xf2, 0x44, 0xc7, 0x95, 0x44,
	0xfe, 0x8c, 0xa9, 0xe4, 0x2e, 0x2d, 0x1a, 0x53, 0x49, 0xa2, 0x4b, 0x47, 0x8f, 0xaf, 0xae, 0xad,
	0xc2, 0xeb, 0x6b, 0xab, 0xf0, 0xe6, 0xda, 0x32, 0x7e, 0x1c, 0x5a, 0xc6, 0xaf, 0x43, 0xcb, 0xf8,
	0x7d, 0x68, 0x19, 0x57, 0x43, 0xcb, 0xf8, 0x73, 0x68, 0x19, 0x7f, 0x0f, 0xad, 0xc2, 0x9b, 0xa1,
	0x65, 0xfc, 0x7c, 0x63, 0x15, 0xae, 0x6e, 0xac, 0xc2, 0xeb, 0x1b, 0xab, 0xd0, 0x99, 0x57, 0xff,
	0xb8, 0xbc, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0xe5, 0x34, 0xd7, 0x0a, 0x0d, 0x00,
	0x00,
}
